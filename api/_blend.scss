@use 'src/utils';
@use 'tokens';
@use './var';

////
/// @access public
/// @group api
////

/// Injects a mood-flag CSS custom property into the css scope.
/// If mood-flag is 0, the mood color does not blend with the base colors.
/// If mood-flag is 1, the mood color blends with the base colors.
/// This property is available at runtime.
/// @example scss
///     // Given that the following CSS custom properties are defined:
///     // --mood-h: 0;
///     // --mood-s: 100;
///     // --mood-l: 50;
///     @include mood-flag;
///
///     // results into
///     --mood--flag: clamp(0, (...) + (...), 1);
/// @requires {mixin} utils.inject
///     <../#utils-mixin-inject>
/// @requires {function} utils.hardlimit
///     <../#utils-function-hardlimit>
@mixin mood-flag {
    @include utils.inject((mood--flag: clamp(0, utils.hardlimit(mood-s) + utils.hardlimit(mood-l), 1)));
}

/// Blends a base color with the mood color
/// This property works at runtime.
/// @example scss
///     // Given that the following CSS custom properties are defined:
///     // --my-color-h: 0;
///     // --my-color-s: 100;
///     // --my-color-l: 50;
///
///     @include api.inject-hsl(
///         'my-color-blended',
///         @api.blend-mood('my-color', 'h'), // default ratio
///         @api.blend-mood('my-color', 's', $ratio: 0.2), // custom ratio
///         @api.blend-mood('my-color', 'l', $ratio: 0.6)  // custom ratio
///     );
///
///     // results into
///     --my-color-blended-h: calc(...);
///     --my-color-blended-s: calc(...);
///     --my-color-blended-l: calc(...);
///     --my-color-blended: hsl(...);
/// @param {string} name
///     CSS custom property name for color
/// @param {string} prop
///     Sub-property of the color to be blended.
/// @param {number} ratio [tokens.$blend-ratio]
///     Base color to mood blend ratio.
/// @return {*}
///     Value of the custom property
/// @requires {function} utils.blend
///     <../#utils-function-blend>
/// @requires {function} utils.runtime
///     <../#utils-function-runtime>
/// @requires {variable} tokens.$blend-ratio
///     <../tokens/#tokens-variable-blend-ratio>
/// @requires {function} runtime
@function blend-mood($name, $prop, $ratio: tokens.$blend-ratio) {
    @return utils.blend(utils.runtime(mood--flag, $fallback: 0),
        utils.blend($ratio,
            var.runtime($name, $prop),
            var.runtime(mood, $prop)),
        var.runtime($name, $prop));
}

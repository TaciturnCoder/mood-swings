@use 'sass:math';

/// # Utility Functions
/// @group fx

// abstract
// -----------
/// Converts concrete values to abstract (unitless) values.
/// @access public
/// @group fx
/// @param {*} $concrete - Concrete value from which to derive unitless value.
/// @return {*} Abstract value.
@function abstract($concrete) {
    @return math.div($concrete, ($concrete * 0 + 1));
}

// inject
// -----------
/// Injects a map of variables into the css scope.
/// @access public
/// @group fx
/// @param {map} $vars - Map of variables to inject.
/// @param {string} $prefix ['mood-swings'] - Prefix to apply.
@mixin inject($vars, $prefix: 'mood-swings') {

    @each $prop,
    $value in $vars {
        --#{$prefix}-#{$prop}: #{$value};
    }
}

// runtime
// -----------
/// Returns the value of a css custom property.
/// @access public
/// @group fx
/// @param {string} $prop - CSS custom property to retrive
/// @param {string} $prefix ['mood-swings'] - Prefix to apply.
/// @return {*} Value of the custom property.
@function runtime($prop, $prefix: 'mood-swings') {
    @return var(--#{$prefix}-#{$prop});
}

// hardlimit
// -----------
/// Compares a property to a limit and returns 1 or 0.
/// If the property is greater than the limit, 1 is returned.
/// If the property is less than the limit, 0 is returned.
/// @access public
/// @group fx
/// @param {string} $prop - Property to compare.
/// @param {string} $limit - Limit to compare.
/// @return {number} 1 or 0.
@function hardlimit($prop, $limit) {
    @return clamp(0, #{runtime($prop)} - #{$limit}, 1);
}

// blend
// -----------
/// Blends two values based on a flag.
/// @access public
/// @group fx
/// @param {number} $flag - Flag to blend.
/// @param {number} $true - Value to return if flag is 1.
/// @param {number} $false - Value to return if flag is 0.
@function blend($flag, $true, $false) {
    @return calc(#{$flag} * #{$true} + (1 - #{$flag}) * #{$false});
}

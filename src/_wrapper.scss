@use './utils';
@use 'tokens';
@use 'api';

////
/// @access public
/// @group wrapper
////

/// Injects following CSS custom properties into the css scope.
///     + color
///     + on-color
///     + container-color
///     + on-container-color
/// This property is available at runtime.
/// @example scss
///     @use '@dwijbavisi/mood-swings';
///     :root {
///         @include mood-swings.new('my-color', #1f7a4d);
///     }
/// @param {string} name
///     CSS custom property name for color
/// @param {color} color
///     Value of the color.
///     Can be any valid CSS color.
/// @requires {mixin} api.inject
///     <./api/#api-mixin-inject>
/// @requires {function} abstract
@mixin new($name, $color) {
    @include api.inject($name,
        utils.abstract(hue($color)),
        utils.abstract(saturation($color)),
        utils.abstract(lightness($color)));
}

/// Returns var notation for a CSS custom property.
/// This value is evaluated at runtime.
/// And can be used for user defined inputs.
/// @example scss
///     @use '@dwijbavisi/mood-swings';
///     :root {
///         @include mood-swings.presets;
///     }
///     body {
///         background-color: mood-swings.runtime('surface');
///         color: mood-swings.runtime('on-surface');
///     }
/// @example scss
///     @use '@dwijbavisi/mood-swings';
///     :root {
///         @include mood-swings.new('notify', orange);
///     }
///     .cookies {
///         background-color: mood-swings.runtime('notify');
///         color: mood-swings.runtime('on-notify');
///     }
/// @param {string} name
///     CSS custom property name for color
/// @requires {function} api.runtime
///     <./api/#api-function-runtime>
@function runtime($name) {
    @return api.runtime($name);
}

/// Injects preset color CSS custom properties into the css scope
/// @example scss
///     @use '@dwijbavisi/mood-swings';
///
///     :root {
///         @include mood-swings.presets;
///     }
///
///     .primary {
///         background-color: mood-swings.runtime('primary');
///         color: mood-swings.runtime('on-primary');
///     }
/// @param {color} accent [tokens.$accent]
///     Accent color for the color scheme
/// @param {color} variant [tokens.$variant]
///     Variant color for the color scheme
/// @param {color} mood [tokens.$mood]
///     Mood color for the color scheme
/// @param {color} error [tokens.$error]
///     Error color for the color scheme
/// @param {color} warning [tokens.$warning]
///     Warning color for the color scheme
/// @param {color} success [tokens.$success]
///     Success color for the color scheme
/// @requires {mixin} api.inject-hsl
///     <./api/#api-mixin-inject-hsl>
/// @requires {mixin} api.inject
///     <./api/#api-mixin-inject>
/// @requires {mixin} api.mood-flag
///     <./api/#api-mixin-mood-flag>
/// @requires {function} api.blend-mood
///     <./api/#api-function-blend-mood>
/// @requires {function} api.runtime
///     <./api/#api-function-runtime>
/// @requires {variable} tokens.$accent
///     <./tokens/#tokens-variable-accent>
/// @requires {variable} tokens.$variant
///     <./tokens/#tokens-variable-variant>
/// @requires {variable} tokens.$mood
///     <./tokens/#tokens-variable-mood>
/// @requires {variable} tokens.$error
///     <./tokens/#tokens-variable-error>
/// @requires {variable} tokens.$warning
///     <./tokens/#tokens-variable-warning>
/// @requires {variable} tokens.$success
///     <./tokens/#tokens-variable-success>
/// @requires {variable} tokens.$abstract
///     <./tokens/#tokens-variable-abstract>
/// @requires {variable} tokens.$variant-blend-ratio
///     <./tokens/#tokens-variable-variant-blend-ratio>
/// @requires {mixin} new
/// @requires {function} abstract
/// @requires {function} runtime
@mixin presets($accent: tokens.$accent,
    $variant: tokens.$variant,
    $mood: tokens.$mood,
    $error: tokens.$error,
    $warning: tokens.$warning,
    $success: tokens.$success) {
    @include api.inject-hsl(accent,
        utils.abstract(hue($accent)),
        utils.abstract(saturation($accent)),
        utils.abstract(lightness($accent)));
    @include api.inject-hsl(variant,
        utils.abstract(hue($variant)),
        utils.abstract(saturation($variant)),
        utils.abstract(lightness($variant)));
    @include api.inject-hsl(mood,
        utils.abstract(hue($mood)),
        utils.abstract(saturation($mood)),
        utils.abstract(lightness($mood)));
    @include api.mood-flag;

    @include new(error, $error);
    @include new(warning, $warning);
    @include new(success, $success);

    @include api.inject(primary,
        api.blend-mood(accent, h),
        api.blend-mood(accent, s),
        api.blend-mood(accent, l));

    @include api.inject(secondary,
        api.blend-mood(variant, h, tokens.$variant-blend-ratio),
        api.runtime(variant, s),
        api.blend-mood(variant, l, tokens.$variant-blend-ratio));

    @include api.inject(surface,
        api.runtime(primary, h),
        10,
        api.runtime(primary, l));
}

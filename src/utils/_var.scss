@use '../../tokens';

////
/// @access public
/// @group utils
////

/// Returns var notation for a CSS custom property.
/// @param {string} prop
///     CSS custom property to retrive
/// @param {string} prefix [tokens.$prefix]
///     Prefix to be applied to the property. \
///     Set to false or null to exclude prefix.
/// @param {*} fallback [null]
///     Fallback value to use if property is not defined. \
///     If not provided, returns var() without fallback.
/// @return {string}
///     var notation for the CSS custom property
/// @requires {variable} tokens.$prefix
///     <./tokens/#tokens-variable-prefix>
@function runtime($prop, $prefix: tokens.$prefix, $fallback: null) {
    $-prop: $prop;

    @if $prefix {
        $-prop: '#{$prefix}-#{$prop}';
    }

    @if $fallback {
        @return var(--#{$-prop}, $fallback);
    } @else {
        @return var(--#{$-prop});
    }
}

/// Inject a map of key-value pairs as CSS custom properties into the CSS scope.
/// @param {map} vars
///     Key-value pairs to inject
/// @param {string} prefix [tokens.$prefix]
///     Prefix to be applied to the property. \
///     Set to false or null to exclude prefix.
/// @requires {variable} tokens.$prefix
///     <./tokens/#tokens-variable-prefix>
@mixin inject($vars, $prefix: tokens.$prefix) {
    @each $prop, $value in $vars {
        @if $prefix {
            --#{$prefix}-#{$prop}: #{$value};
        } @else {
            --#{$prop}: #{$value};
        }
    }
}
